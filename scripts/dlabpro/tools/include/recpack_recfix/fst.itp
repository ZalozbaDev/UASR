## UASR: Unified Approach to Speech Synthesis and Recognition
## - Data packaging functions for fixpoint recognizer (recfix)
##
## AUTHOR : Frank Duckhorn
## PACKAGE: uasr/scripts/dlabpro/tools/include/recpack_recfix

## Copyright 2013 UASR contributors (see COPYRIGHT file)
## - Chair of System Theory and Speech Technology, TU Dresden
## - Chair of Communications Engineering, BTU Cottbus
##
## This file is part of UASR.
##
## UASR is free software: you can redistribute it and/or modify it under the
## terms of the GNU Lesser General Public License as published by the Free
## Software Foundation, either version 3 of the License, or (at your option)
## any later version.
##
## UASR is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
## details.
##
## You should have received a copy of the GNU Lesser General Public License
## along with UASR. If not, see <http://www.gnu.org/licenses/>.

#@uasrdoc: ignore

function -PACK_fst(nrm,itRN,nU)
{
	data idAux;
	data idAux2;
	fst iRN;
	itRN NULL nU iRN -copy_ui;
	iRN 0 iRN -push_weights;

	# extract transitions
	data iT;
	:iRN.td["~INI"]: iT -join;
	:iRN.td["~TER"]: iT -join;
	:iRN.td["~TIS"]: iT -join;
	:iRN.td["~TOS"]: iT -join;
	"~LSR" iRN.td -find_comp 0 >= if; :iRN.td["~LSR"]: iT -join; else "~LSR" -type long iT -addcomp; end;
	"~STK" iRN.td -find_comp 0 >= if; :iRN.td["~STK"]: iT -join; else "~STK" -type long iT -addcomp; end;
	iT 1 iT -sortup; iT 0 iT -sortup;

	# extract state offset
	data iS; :iRN.sd["~FLG"]: iS =;
	iT 0 idAux -compress;
	"" -1 iS -rindex; iS idAux 1 0 idAux2 -gen_index; iS 1 1 iS -delete;
	idAux2 0 idAux 1 2 idAux -lookup; idAux iS -join;

	# quant states
	data dS;
	:iS[1]: 1 idAux -QUANT_u16; idAux dS -join;
	:iS[2]: 1 idAux -QUANT_u8;  idAux dS -join;
	:iS[0]: 1 idAux -QUANT_u8;  idAux dS -join;
	.nMAX_FSTS_NUM dS -reallocate;

	# quant transitions
	data dT;
	:iT["~TER"]: 1           idAux -QUANT_u16; idAux dT -join;
	:iT["~TIS"]: 1           idAux -QUANT_s8;  idAux dT -join;
	:iT["~TOS"]: 1           idAux -QUANT_s8;  idAux dT -join;
	:iT["~LSR"]: :32768/nrm: idAux -QUANT_s16; idAux dT -join;
	:iT["~STK"]: 1           idAux -QUANT_s8;  idAux dT -join;
	1 iT.nrec zeros 1        idAux -QUANT_s8;  idAux dT -join;
	.nMAX_FSTT_NUM dT -reallocate;

	# perpare os
	data dOS; iRN.os .nMAX_FSTO_LEN dOS /force -tconvert;
	.nMAX_FSTO_NUM dOS -reallocate;

	# Pack it
	iS.nrec 1 "fst.xs"  "u16" -PACK1;
	iT.nrec 1 "fst.xt"  "u16" -PACK1;
	.nPRNW :32768/nrm: "fst.prnw" "s16" -PACK1;
	0       1 "_blank1" "u16" -PACK1;
	dS    0 0 "fst.s"   "mix" -PACK;
	dT    0 0 "fst.t"   "mix" -PACK;
	dOS   0 0 "fst.os"  "mix" -PACK;
}


function -PACK_cnf(nrm,itGP)
{
  # Get phoneme id table from itGP
  data dGP;
  1 0 0 :itGP.td["~TIS"]: vmax -fetch ++ zeros dGP =; 0 1 dGP -fill;
  dGP itGP.td 0 "~TIS" itGP.td -find_comp dGP -gen_index { -1 };
  dGP 0 itGP.td "~TOS" itGP.td -find_comp 1 dGP -lookup { -1 };

  # Mark pause + trash
  data aux;
  itGP.os "." "cmp" aux -strop; :aux.==0: dGP -dmark; 255 0 dGP /mark -fill;
  itGP.os "#" "cmp" aux -strop; :aux.==0: dGP -dmark; 255 0 dGP /mark -fill;

	# Pack it
  var x;
  "recfix.cnf.mode" .nCNFM_AED "S" -CFG_get_ex x -vset; x 1 "cnf.mode" "u8" -PACK1;
  0       1 "_blank1"  "u8"  -PACK1;
  "recfix.cnf.tad" 0.05 "S" -CFG_get_ex x -vset; x 0 "trg.tad" "s16"  -PACK1;
  "recfix.cnf.ted" 0.75 "S" -CFG_get_ex x -vset; x 0 "trg.ted" "s16"  -PACK1;
  0       1 "_blank2"  "u16" -PACK1;
  dGP 1 .nMAX_MIX_NUM "cnf.phn" "u8" -PACK;
}
