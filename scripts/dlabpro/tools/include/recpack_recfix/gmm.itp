## UASR: Unified Approach to Speech Synthesis and Recognition
## - Data packaging functions for fixpoint recognizer (recfix)
##
## AUTHOR : Frank Duckhorn
## PACKAGE: uasr/scripts/dlabpro/tools/include/recpack_recfix

## Copyright 2013 UASR contributors (see COPYRIGHT file)
## - Chair of System Theory and Speech Technology, TU Dresden
## - Chair of Communications Engineering, BTU Cottbus
##
## This file is part of UASR.
##
## UASR is free software: you can redistribute it and/or modify it under the
## terms of the GNU Lesser General Public License as published by the Free
## Software Foundation, either version 3 of the License, or (at your option)
## any later version.
##
## UASR is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
## details.
##
## You should have received a copy of the GNU Lesser General Public License
## along with UASR. If not, see <http://www.gnu.org/licenses/>.

function -PACK_gau(nrm,itGm)
{
	# Extract data
	data idICov;
	data idMean;
	idMean idICov itGm -extract;
	idICov.nblock idMean -set nblock;
	idICov.nblock itGm.cdet -set nblock;
	idMean -type double idMean -tconvert;
	idICov -type double idICov -tconvert;

	# Precalculate
	data idGamma; 
		idMean ' idICov * idMean *
		itGm.cdet .ln :ln(2*PI)*idMean.dim: + +
		0.5 .* idGamma =;
	idGamma :itGm.cdet.!=0: .* :itGm.cdet.==0: 500 .* + idGamma =; # set for invalid Gaussians gamma=500
	data idBeta;  idICov idMean * -1 .* idBeta =;
	data idIV; itGm.ivar 0.5 .* -type double idIV -tconvert;
	data idIC; itGm.icov -type double idIC -tconvert;

	# Norm calc
	idIV -MAX var vnrm;
	idIC -MAX var cnrm;
	cnrm vnrm > if; cnrm vnrm =; end;
	:idIV=idIV./vnrm;
	:idIC=idIC./vnrm;
	:vnrm=nrm*vnrm;
	:idBeta=idBeta./vnrm;
	:vnrm=nrm*vnrm;
	:idGamma=idGamma./vnrm;

	# Expand to max size
	-type double :.nMAX_SFA_DIM-idBeta.dim: idBeta -addncomps;
	-type double :.nMAX_SFA_DIM-idIV.dim: idIV -addncomps;
	-type double :.nMAX_SFA_DIM*(.nMAX_SFA_DIM-1)/2-idIC.dim: idIC -addncomps;

	# Quant + join
	data dGAU;
	idGamma 0 idGamma -QUANT_s32; idGamma dGAU -join;
	idBeta  0 idBeta  -QUANT_s16; idBeta  dGAU -join;
	idIV    0 idIV    -QUANT_s16; idIV    dGAU -join;
	idIC    0 idIC    -QUANT_s16; idIC    dGAU -join;

	# Norm to nGMM_MIN_CLIP
	0 var nShf; vnrm :.nGMM_MIN_CLIP*2: > while; :vnrm=vnrm/2; nShf ++=; end;

	# Pack it
	idMean.nrec 1 "gau.num" "u16" -PACK1;
	nShf        1 "gau.shf" "s8"  -PACK1;
	0           1 "_blank1" "u8"  -PACK1;
	.nMAX_GAU_NUM dGAU -reallocate;
	dGAU 0 0 "gau.g" "mix" -PACK;
	"\n  norm gau: $[vnrm]" -MSG2;

	vnrm return;
}

function -PACK_mix(nrm,iMmap)
{
	iMmap.weak_tmx -is_empty if;
		"\n  FAILED (mmap.weak_tmx is empty)" -MSG;
		leave;
	end;
	
	# Generate selection table for extraction
	data idMark; -type int 1 iMmap.weak_tmx.dim idMark -array;
	0 1 idMark -fill; :idMark%2: ' idMark =;

	# Extract dMIXW and dMIXI from weak_tmx
	idMark iMmap.weak_tmx -dmark;
	data dMIXW; iMmap.weak_tmx 0 0 dMIXW /mark -select;
	data dMIXI; iMmap.weak_tmx 0 0 dMIXI /mark -delete;

	# Count components of mixtures
	data dNGAU; :dMIXI.>=0: NULL 0 "sum" dNGAU /rec -aggregate;

	# Combine + quant dMIXW and dMIXI
	dMIXI :dMIXI.dim*dMIXI.nrec: 1 dMIXI -reshape;
	dMIXW dMIXI.nrec             1 dMIXW -reshape;
	:dMIXW.*(32768/nrm): dMIXI -join;
	:dMIXI[0].>=0: dMIXI -dmark; dMIXI 0 0 dMIXI /mark -select;

	# Generate ladd table
	data dLADD; -type double 1 .nMAX_LAD_NUM dLADD -array;
	0 :nrm/32768: dLADD -fill;
	dLADD -1 .* .exp 1 + .ln -1 .* dLADD =;
	data dNLADD; dLADD :-0.5*nrm/32768: .<= NULL 0 "sum" dNLADD /rec -aggregate;
	:dNLADD[0,0]==.nMAX_LAD_NUM: if;
		"\n  WARN: ladd table maximum size exceeded (.nMAX_LAD_NUM)" 0 -WARNING;
	end;
	
	# Pack it
	:iMmap.weak_tmx.dim/2: 1 "mix.nmix" "u16" -PACK1;
	:dNLADD[0,0]:          1 "mix.nlad" "u16" -PACK1;
	dNGAU   1 .nMAX_MIX_NUM                   "mix.ngau" "u16" -PACK;
	dMIXI ' 1 :.nMAX_MIX_NUM*.nMAX_MIX_GAU*2: "mix.m"    "u16" -PACK;
	dLADD   :32768/nrm: .nMAX_LAD_NUM         "mix.lad"  "s16" -PACK;
	"\n  norm mix: $[nrm]" -MSG2;

	nrm return;
}
