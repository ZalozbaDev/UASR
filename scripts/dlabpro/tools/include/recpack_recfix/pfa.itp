## UASR: Unified Approach to Signal Synthesis and Recognition
## - Data packaging functions for fixpoint recognizer (recfix)
##
## AUTHOR : Frank Duckhorn
## PACKAGE: uasr/scripts/dlabpro/tools/include/recpack_recfix

## Copyright 2013-2016 UASR contributors (see COPYRIGHT file)
## - Chair of Communications Engineering, BTU Cottbus-Senftenberg
## - Fraunhofer IKTS, Dresden
## - Chair of System Theory and Speech Technology, TU Dresden
##
## This file is part of UASR.
##
## UASR is free software: you can redistribute it and/or modify it under the
## terms of the GNU Lesser General Public License as published by the Free
## Software Foundation, either version 3 of the License, or (at your option)
## any later version.
##
## UASR is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
## details.
##
## You should have received a copy of the GNU Lesser General Public License
## along with UASR. If not, see <http://www.gnu.org/licenses/>.

#@uasrdoc: ignore

function -PACK_fil(iPfa,nFILFAC)
{
	data dMELM;
	data dMELU;

  iPfa.fil -is_empty if;
    1 1 zeros dMELM =;
    1 1 zeros dMELU =;
  else;
  	
  	iPfa.fil ' nFILFAC .* dMELM =;

    # get used positions
    -type int 2 dMELM.nrec dMELU -array;
    data dT;
    0 var i; i dMELM.nrec < while;
      i 1 dMELM /rec -xfetch 0 .!= ' 0 dT -compress;
      :dT[0,0]==0: if :dT[0,2]: else 0 end i 0 dMELU -store;
      :dT[dT.nrec-1,0]==0: if :dT[dT.nrec-1,1]: else dMELM.dim end :dMELU[i,0]: - i 1 dMELU -store;
    i ++=; end;

  end;

	dMELM ' 0 :.nMAX_PFA_DIM*.nMAX_FIL_DIM: "pfa.fil" "s16" -PACK;
	dMELU ' 1 :2*.nMAX_FIL_DIM: "pfa.filuse" "u16" -PACK;
}

function -PACK_log(nrm)
{
	65536 var ni;
	32767 var no;
	:2^(-16+1): var quant_energy;
	data dLOG;
	-type double 1 ni dLOG -array;
	0 :nrm/quant_energy/ni: dLOG -fill;
	:dLOG[0,0]=dLOG[1,0]/2;
	dLOG .ln dLOG =;
	"\n  log min: ${dLOG[0,0]}" -MSG2;
	dLOG :no/dLOG[dLOG.nrec-1,0]: dLOG.nrec "pfa.log" "s16" -PACK;
	:dLOG[dLOG.nrec-1,0]: return;
}

function -PACK_wvl(iPfa)
{

	data dWVL;
  iPfa.trf "WVL" == if;
    FWTproc fwt;
    iPfa.wvl_level    fwt -set level;
    "d$[iPfa.wvl_di]" fwt -set wvltype;
    dWVL fwt -get_coef;
  else;
    1 1 zeros dWVL =;
  end;
	dWVL.nrec          1 "pfa.wvlnum" "s8"  -PACK1;
	dWVL 0 .nMAX_WVL_NUM "pfa.wvl"    "s16" -PACK;
}

function -PACK_pfa(nrm)
{
  -UPFA_init;
  object iPfa; .__FEA_iPfa iPfa =;

  0 var nFRMSHF;
  0 var nTRFSHF;
  "recfix.nrm.frm" 0 "S" -CFG_get_ex var nFRMNRM;                                      #   Shift offset in frameing   
  "recfix.nrm.trf" 0 "S" -CFG_get_ex var nTRFNRM;                                      #   Shift offset after transformation
  "recfix.nrm.fil" 0 "S" -CFG_get_ex var nFILNRM;                                      #   Shift offset after filter
  "recfix.shf.fil" 3 "S" -CFG_get_ex var nFILSHF;                                      #   Shift offset after filter

	"\n  nrm.sig: $[nrm]" -MSG;

  data idWnd; iPfa.wlen 1 ones iPfa.wlen iPfa.wlen iPfa.wtype iPfa.wnorm window ' idWnd =;
  nFRMNRM 0 != if;
    0 0 idWnd vmax -fetch var wmax;
    :nrm/nFRMNRM: var nchg;
    :nchg*wmax>1.00001: while; :nchg=nchg/2; nFRMSHF ++=; end;
    :idWnd=idWnd*nchg;
	  :nrm=nrm/nchg/2^nFRMSHF; # norm after FRM
  end;
	"\n  nrm.frm: $[nrm] (wmax: $[0 0 idWnd vmax -fetch] shf: $[nFRMSHF])" -MSG;
  iPfa.trf "FFT" == if; :nrm=nrm*iPfa.len;
  else; "default normalization not implemented for trf=$[iPfa.trf]" 0 -WARNING; end;
  nTRFNRM 0 != if;
    :nTRFNRM>nrm/2: while; :nTRFNRM=nTRFNRM/2; nTRFSHF --=; end;
    :nTRFNRM<nrm/2: while; :nTRFNRM=nTRFNRM*2; nTRFSHF ++=; end;
  end;
	:nrm=nrm/2/2^nTRFSHF; # norm after transformation
	"\n  nrm.trf: $[nrm] (shf: $[nTRFSHF])" -MSG;
  :2^-nFILSHF: var nFILFAC;
  nFILNRM 0 != if;
    iPfa.fil -is_empty if 1 else 0 0 iPfa.fil vmax ' vmax -fetch end var fmax;
    :nFILFAC=nFILFAC*nrm/nFILNRM;
    :nFILFAC*fmax>1.00001: while; :nFILFAC=nFILFAC/2; nFILSHF ++=; end;
	  :nrm=nrm/nFILFAC/2^nFILSHF; # norm after FIL
  end;
	"\n  nrm.fil: $[nrm] (fac: $[nFILFAC] shf: $[nFILSHF])" -MSG;

	iPfa.srate                      1 "pfa.srate"  "u32" -PACK1;
	iPfa.crate                      1 "pfa.crate"  "u16" -PACK1;
	iPfa.wlen                       1 "pfa.wlen"   "u16" -PACK1;
	iPfa.len                        1 "pfa.len"    "u16" -PACK1;
  0 var nTyp;
  iPfa.trf "FFT" == if .nPFA_TYP_FFT nTyp += else
  iPfa.trf "WVL" == if .nPFA_TYP_WVL nTyp += else
  iPfa.trf "MGC" == if .nPFA_TYP_CEP nTyp += else
    "Transformation (trf=$[iPfa.trf]) method not implemented" 0 -WARNING end end end;
  iPfa.trf "FFT" == if "ABS" else "NONE" end var sDefTmap;
  iPfa.tmap sDefTmap != if "Transformation maping (tmap=$[iPfa.tmap]) method not implemented" 0 -WARNING end;
  iPfa.fil -is_empty not if .nPFA_TYP_FIL nTyp += end;
  iPfa.fmap "LOG"  == if .nPFA_TYP_LOG nTyp += else
  iPfa.fmap "NONE" != if "Filter maping (fmap=$[iPfa.fmap]) method not implemented" 0 -WARNING end end;
	nTyp                            1 "pfa.typ"    "u8"  -PACK1;
	nFRMSHF                         1 "pfa.frmshf" "s8"  -PACK1;
	nTRFSHF                         1 "pfa.trfshf" "s8"  -PACK1;
	nFILSHF                         1 "pfa.filshf" "s8"  -PACK1;
  0                               1 "_blank1"    "s16" -PACK1;
	iPfa.dim                        1 "pfa.dim"    "u16" -PACK1;
	iPfa.trf "MGC" == if iPfa.mgc_gamma -1 * else 0 end  0 "pfa.mgcgam" "u16" -PACK1;
	iPfa.trf "MGC" == if iPfa.mgc_lambda     else 0 end  0 "pfa.mgclam" "u16" -PACK1;
  0                               1 "_blank1"    "s8"  -PACK1;
	iPfa -PACK_wvl;
	idWnd 0 .nMAX_FRAME_DIM           "pfa.wnd"    "u16" -PACK;

	iPfa nFILFAC -PACK_fil;
	nrm -PACK_log nrm =;
	"\n  nrm.log: $[nrm]" -MSG;
	nrm return;
}

function -NRM_Calc(idHist)
{
  # Config
  data idPrc; { 0 3e-7 1e-6 3e-6 } ' idPrc =;
  1e5  var nMinHistSum;
  1    var nMaxId;
  1.05 var nMaxInc

  # Split Val + Hist
  data idVal;
  :idHist[0]: idVal =;
  idHist 1 :idHist.dim-1: idHist -select;

  # Get sum + max + activation
  data idSum; idHist sum idSum =;
  data idMax; :idHist.>0: idVal .* vmax idMax =;
  data idAct; idSum nMinHistSum .>= idAct =;

  # Find max pos
  data idMaxI; idMax ' idVal 0 0 idMaxI -gen_index;

  # Get percentage info for max
  var nH;
  var nP;
  var nPrc;
  var nSum;
  idPrc.nrec idMax -reallocate;
  0 nH =; nH idHist.dim < while; :idAct[0,nH]: if;
    :idMaxI[nH,0]: nP =;
    0 nSum =;
    1 nPrc =; nPrc idPrc.nrec < while;
      nP 0 > :nSum/idSum[0,nH]: :idPrc[nPrc,0]: < && while;
        nSum :idHist[nP,nH]: + nSum =;
      nP --=; end;
      :idMax[nPrc,nH]=idVal[nP,0];
    nPrc ++=; end;
  end; nH ++=; end;

  # Get cuttoff of max nrm
  data idCutOff; idMax idCutOff =;
  data idAux;
  32768 log :idVal[idVal.nrec-1,0]/idVal[0,0]: :1/(idVal.nrec-1): ^ log / round var nD15bit;
  0 nH =; nH idHist.dim < while; :idAct[0,nH]: if;
    idMax idVal nH 0 idAux -gen_index;
    :max(idAux-nD15bit+1,0): idAux =;
    0 nPrc =; nPrc idPrc.nrec < while;
      0 0 (
        ( 0 :idAux[nPrc,0]: :idHist[nH]: /rec -xfetch ) sum
      ) -fetch :idSum[0,nH]: / nPrc nH idCutOff -store;
    nPrc ++=; end;
  end; nH ++=; end;

  # Add to config
  var nNrm;
  data idName; idHist idName -get_cnames;
  0 nH =; nH idHist.dim < while; :idAct[0,nH]: if;
    :idMax[nMaxId,nH]*nMaxInc: nNrm =;
    { "uasr.recfix.nrm.${idName[nH,0]}" "$[nNrm]" } .__CFG_idCfg -cat;
  end; nH ++=; end;
}
