## UASR: Unified Approach to Speech Synthesis and Recognition
## - Data packaging functions for fixpoint recognizer (recfix)
##
## AUTHOR : Frank Duckhorn
## PACKAGE: uasr/scripts/dlabpro/tools/include/recpack_recfix

## Copyright 2013 UASR contributors (see COPYRIGHT file)
## - Chair of System Theory and Speech Technology, TU Dresden
## - Chair of Communications Engineering, BTU Cottbus
##
## This file is part of UASR.
##
## UASR is free software: you can redistribute it and/or modify it under the
## terms of the GNU Lesser General Public License as published by the Free
## Software Foundation, either version 3 of the License, or (at your option)
## any later version.
##
## UASR is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
## details.
##
## You should have received a copy of the GNU Lesser General Public License
## along with UASR. If not, see <http://www.gnu.org/licenses/>.

#@uasrdoc: ignore

function -PACK_sfa(nrm,iFI,nDim)
{
	data idAux;

  "recfix.shf.dlt0" 3 "S" -CFG_get_ex var nA0SHF;
  "recfix.shf.dlt1" 3 "S" -CFG_get_ex var nA1SHF;
  "recfix.shf.dlt2" 3 "S" -CFG_get_ex var nA2SHF;

  "recfix.nrm.dlt0" 0 "S" -CFG_get_ex var nA0NRM;
  "recfix.nrm.dlt1" 0 "S" -CFG_get_ex var nA1NRM;
  "recfix.nrm.dlt2" 0 "S" -CFG_get_ex var nA2NRM;

  nrm var nrm0;
  nrm var nrm1;
  nrm var nrm2;

  :2^-nA0SHF: var nA0FAC;
  nA0NRM 0 != if;
    :nA0FAC=nA0FAC*nrm0/nA0NRM;
    :nA0FAC>1.00001: while; :nA0FAC=nA0FAC/2; nA0SHF ++=; end;
	  :nrm0=nrm0/nA0FAC/2^nA0SHF; # norm after FIL
  end;
	"\n  nrm.dlt0: $[nrm0] (fac: $[nA0FAC] shf: $[nA0SHF])" -MSG;
  :2^-nA1SHF: var nA1FAC;
  nA1NRM 0 != if;
    :nA1FAC=nA1FAC*nrm1/nA1NRM;
    :nA1FAC>1.00001: while; :nA1FAC=nA1FAC/2; nA1SHF ++=; end;
	  :nrm1=nrm1/nA1FAC/2^nA1SHF; # norm after FIL
  end;
	"\n  nrm.dlt1: $[nrm1] (fac: $[nA1FAC] shf: $[nA1SHF])" -MSG;
  :2^-nA2SHF: var nA2FAC;
  nA2NRM 0 != if;
    :nA2FAC=nA2FAC*nrm2/nA2NRM;
    :nA2FAC>1.00001: while; :nA2FAC=nA2FAC/2; nA2SHF ++=; end;
	  :nrm2=nrm2/nA2FAC/2^nA2SHF; # norm after FIL
  end;
	"\n  nrm.dlt2: $[nrm2] (fac: $[nA2FAC] shf: $[nA2SHF])" -MSG;
  "recfix.shf.pca"  3 "S" -CFG_get_ex var nPCASHF;
  "recfix.nrm.pca"  0 "S" -CFG_get_ex var nPCANRM;
  nPCANRM 0 == if;
    0 0 { nrm0 nrm1 nrm2 } ' vmax -fetch nrm =;
  else;
    nPCANRM nrm =;
  end;
  # TODO fac0>1 || fac1>1 || fac2>1 => nrm*=2 shf++
	"\n  nrm.pca: $[nrm] (fac: ${nrm0/nrm/2^nPCASHF} ${nrm1/nrm/2^nPCASHF} ${nrm2/nrm/2^nPCASHF} shf: $[nPCASHF])" -MSG;


	# Calc context length's for A matrix bands
	:(iFI.idDltW.dim-1)/2: var nACL;
	data idALen; { 0 nACL ${nACL*2} } idALen =;
	idALen NULL 0 "max" idAux -aggregate; :idAux[0,0]: var nACLx;
	:.nMAX_SFA_A_CL*2+1: var nMAX_SFA_A_LEN;
	
	# Save dimension and context length's for A matrix bands
	nDim    1 "sfa.dim"  "u16" -PACK1;
	nPCASHF 1 "sfa.wshf" "s8"  -PACK1;
	3       1 "sfa.an"   "u8"  -PACK1;
	nACLx   1 "sfa.alx"  "u8"  -PACK1;
  0       1 "_blank1"  "s8"  -PACK1;
  0       1 "_blank1"  "s16" -PACK1;
	idALen  1 .nMAX_SFA_A_NUM "sfa.al" "u8" -PACK; # alen

	# Expand delta weight vector to A matrix bands ( normal,delta,delta2 )
	data idDW1;
	data idDW2;
	iFI.idDltW ' idDW1 =;
	nMAX_SFA_A_LEN idDW1 -reallocate;
	0 var x; x iFI.idDltW.dim < while;
		idDW1 x idAux /rec -shift;
		:idDW2=idDW2+idAux*idDW1[x,0];
	x ++=; end;
	{ 1 } ' idAux =; nMAX_SFA_A_LEN idAux -reallocate;
  :idAux=idAux.*nA0FAC;
	:idDW1.*nA1FAC: idAux -join;
	:idDW2.*nA2FAC: idAux -join;
	idAux 0 :nMAX_SFA_A_LEN*.nMAX_SFA_A_NUM: "sfa.a" "s16" -PACK;
	
	# Save shift coeffs for A matrix
	data idShf; { nA0SHF nA1SHF nA2SHF } idShf =;
	idShf 1 .nMAX_SFA_A_NUM "sfa.ashf" "s8" -PACK;

	# Prepare map for mean+pca expand over unused delta+delta2
	data idMap;
	iFI.idDlt NULL 0 "sum" idAux -aggregate;
	:iFI.idX.dim-idAux[0,0]-idAux[1,0]: var nBase;
	1 nBase ones idMap =;
	iFI.idDlt ' :iFI.idDlt.dim*iFI.idDlt.nrec: 1 idAux -reshape; idAux idMap -cat;
	0 var id; 0 var r; r idMap.nrec < while;
		:idMap[r,0]: if; :idMap[r,0]=id; id ++=; else; :idMap[r,0]=-1; end;
	r ++=; end;

	# Generate vector norm
	data idVN;
	1 nBase ones nrm0 ./ idVN =;
	1 nBase ones nrm1 ./ idVN -cat;
	1 nBase ones nrm2 ./ idVN -cat;

	# Map+pack mean vector
	data idM; idMap 0 iFI.idX ' 0 1 idM -lookup;
	idM idVN .* idM =;
	idM 0 :.nMAX_PFA_DIM*.nMAX_SFA_A_NUM: "sfa.m" "s16" -PACK;

	# Map+pack pca matrix
  :idVN=idVN.*nrm*2^nPCASHF;
	data idW; idMap 0 iFI.idW 0 nDim idW -lookup;
	idW idVN ./ idW =;
	idW 0 :.nMAX_PFA_DIM*.nMAX_SFA_A_NUM*.nMAX_SFA_DIM: "sfa.w" "s16" -PACK;

	nrm return;
}
