## UASR: Unified Approach to Signal Synthesis and Recognition
## - Data packaging functions for ssmg demonstrator
##
## AUTHOR : Frank Duckhorn
## PACKAGE: uasr/scripts/dlabpro/tools/include/recpack_ssmg

## Copyright 2013-2016 UASR contributors (see COPYRIGHT file)
## - Chair of Communications Engineering, BTU Cottbus-Senftenberg
## - Fraunhofer IKTS, Dresden
## - Chair of System Theory and Speech Technology, TU Dresden
##
## This file is part of UASR.
##
## UASR is free software: you can redistribute it and/or modify it under the
## terms of the GNU Lesser General Public License as published by the Free
## Software Foundation, either version 3 of the License, or (at your option)
## any later version.
##
## UASR is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
## details.
##
## You should have received a copy of the GNU Lesser General Public License
## along with UASR. If not, see <http://www.gnu.org/licenses/>.

#@uasrdoc: ignore

65536  var nF_PADE;

function -PACK_pade()
{
	"$[.sDirDsp]/PADE.BIN" var sPADE;
	"\n   Packing pade file ($[sPADE])."         -MSG; # Protocol
	
	data dPADE;
	## TODO how to calculate the values
	{ 3.895500000000000e-001 1.797923085853458e-001 1.082083384931088e-001 7.082727483808994e-002 4.674599895514548e-002 2.885555577054620e-002 1.391250062193722e-002 } dPADE =;

	dPADE .nF_PADE dPADE -QUANT_int;
	sPADE "raw" dPADE stdfile -export;

	" ok"                                                   -MSG; # Protocol
}

function -PACK_syn(sSynDir,sSynMod)
{
	"$[.sDirDsp]/syn_cnv.bin"   var sCNV;
	"$[.sDirDsp]/syn_gmm.bin"   var sGMM;
	"$[.sDirDsp]/syn_unit.bin"  var sUNIT;

	"\n   Packing syn cnv matrix file ($[sCNV])."         -MSG; # Protocol
	data dCNV; "$[sSynDir]/cnvMat_$[sSynMod].dn3" dCNV -restore;
	dCNV -type float dCNV -tconvert;
	sCNV "raw" dCNV stdfile -export;
	" ok"                                                   -MSG; # Protocol

	"\n   Packing gaussian mean vectors file ($[sGMM])."         -MSG; # Protocol
	hmm itHMM;  "$[sSynDir]/$[sSynMod].hmm" itHMM -restore;
	object iFI; "$[sSynDir]/feainfo.object" iFI   -restore;
	data dGMM; itHMM.gm.mean dGMM =;
	itHMM.lsmean dGMM -join;
	iFI.idW inv dGMM * iFI.idX - dGMM =;
	dGMM -type float dGMM -tconvert;
	sGMM "raw" dGMM stdfile -export;
	" ok"                                                   -MSG; # Protocol

	"\n   Packing syn unit string file ($[sUNIT])."         -MSG; # Protocol
	data idUnits; "$[sSynDir]/allUnits.txt" "ascii" idUnits stdfile -import;

	data dUNIT;
	idUnits 0 1 dUNIT -select;
	dUNIT 64 dUNIT /force -tconvert;
	-type int 4 dUNIT -addncomps;

	data idU;
	data dID; -type short 1 dID -addncomps;
	data dF0; -type float 1 dF0 -addncomps;
	data dI0; -type float 1 dI0 -addncomps;
	0 var nU; nU idUnits.nrec < while;
		"$[sSynDir]/${idUnits[nU,0]}_$[sSynMod].dn3" idU /noerror -restore ?error if;
			idU -reset;
		endif;
		:dUNIT[nU,1]=idU.nrec;
		:idU["~TIS"]: dID -cat;
		:idU["~F0"]:  dF0 -cat;
		:idU["~INT"]: dI0 -cat;
	nU ++=; end;

	dID.nrec 2 % if; ## FIX correct alignment of floats in dF0 and dI0
		{ 0 } dID -cat;
		{ 0 } dF0 -cat;
		{ 0 } dI0 -cat;
		dUNIT.nrec ++ dUNIT -reallocate;
		:dUNIT[dUNIT.nrec-1,0]="[FILL]";
		:dUNIT[dUNIT.nrec-1,1]=1;
	end;

	data dNU; -type int 1 1 dNU -array; :dNU[0,0]=dUNIT.nrec;
	sUNIT "raw" dNU stdfile -export;
	sUNIT "raw" dUNIT stdfile /append -export;
	sUNIT "raw" dID   stdfile /append -export;
	sUNIT "raw" dF0   stdfile /append -export;
	sUNIT "raw" dI0   stdfile /append -export;
	" ok"                                                   -MSG; # Protocol
}

