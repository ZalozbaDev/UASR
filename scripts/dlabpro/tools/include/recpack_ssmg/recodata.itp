## UASR: Unified Approach to Signal Synthesis and Recognition
## - Data packaging functions for ssmg demonstrator
##
## AUTHOR : Frank Duckhorn
## PACKAGE: uasr/scripts/dlabpro/tools/include/recpack_ssmg

## Copyright 2013-2016 UASR contributors (see COPYRIGHT file)
## - Chair of Communications Engineering, BTU Cottbus-Senftenberg
## - Fraunhofer IKTS, Dresden
## - Chair of System Theory and Speech Technology, TU Dresden
##
## This file is part of UASR.
##
## UASR is free software: you can redistribute it and/or modify it under the
## terms of the GNU Lesser General Public License as published by the Free
## Software Foundation, either version 3 of the License, or (at your option)
## any later version.
##
## UASR is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
## details.
##
## You should have received a copy of the GNU Lesser General Public License
## along with UASR. If not, see <http://www.gnu.org/licenses/>.

#@uasrdoc: ignore

var sRD;

#### Write functions #########

function -algospec(iSI)
{
  data dAlgoSpec;
  -type char   4 dAlgoSpec -addncomps;
  -type int   18 dAlgoSpec -addncomps;
  -type float  1 dAlgoSpec -addncomps;
  -type int    2 dAlgoSpec -addncomps;
  { { "resize" } { "qresize" } { "btone" } { "-" }
    { "fprunet" } { "qswitch" } { "qpers" } { "hexp" }
    { "hexpot" } { "btlists" } { "tosrdc" } { "aheu" } { "sheu" }
    { "-" } { "-" } { "-" } { "numfst" } { "-" } { "-" } { "-" } { "-" }
    { "-" } { "-" } { "-" } { "-" } { "-" } } 0 dAlgoSpec -set_cnames;

  1 dAlgoSpec -reallocate;
  :dAlgoSpec[0,"qresize"]=1;
  :dAlgoSpec[0,"fprunet"]=40; # TODO: config for pruning
  :dAlgoSpec[0,"qpers"]=1;
  :dAlgoSpec[0,"hexp"]=1;
  :dAlgoSpec[0,"hexpot"]=16;
  :dAlgoSpec[0,"btlists"]=128;
  :dAlgoSpec[0,"tosrdc"]=1;
  :dAlgoSpec[0,"aheu"]=1;
  :dAlgoSpec[0,"sheu"]=2;
  :dAlgoSpec[0,"numfst"]=iSI.itRN.ud.nrec;

  dAlgoSpec dAlgoSpec -cat;
  :dAlgoSpec[1,"qpers"]=2;
  :dAlgoSpec[1,"sheu"]=1;
  :dAlgoSpec[1,"numfst"]=iSI.itRNr.ud.nrec;

  "$[.sRD]" "raw" dAlgoSpec stdfile -export;
}

function -minireco(iSI)
{
  data dMiniReco;
  data dAux;
  -type int 7 dMiniReco -addncomps;
  { { "nsym" } { "-" } { "ntis" } { "-" } { "-" } { "-" } { "-" } } 0 dMiniReco -set_cnames;
  1 dMiniReco -reallocate;
  :dMiniReco[0,"nsym"]=iSI.itRN.os.nrec;
  :iSI.itGP.td["~TIS"]: NULL 0 "max" dAux /rec -aggregate;
  :dMiniReco[0,"ntis"]=dAux[0,0]+1;
  "$[.sRD]" "raw" dMiniReco stdfile /append -export;
}

function -fsthead(itFst,nU)
{
  data dFst;
  -type int  2 dFst -addncomps;
  -type char 4 dFst -addncomps;
  -type int  5 dFst -addncomps;
  { { "nums" } { "numt" } { "btis" } { "btos" } { "bstk" } { "-" }
    { "-" } { "-" } { "-" } { "-" } { "awh" } } 0 dFst -set_cnames;
  1 dFst -reallocate;
  :dFst[0,"nums"]=itFst.ud[nU,"~XS"];
  :dFst[0,"numt"]=itFst.ud[nU,"~XT"];
  "~TIS" itFst.td -find_comp 0 >= 0 "btis" dFst -store;
  "~TOS" itFst.td -find_comp 0 >= 0 "btos" dFst -store;
  "~STK" itFst.td -find_comp 0 >= 0 "bstk" dFst -store;
  :dFst[0,"awh"]=0;
  "$[.sRD]" "raw" dFst stdfile /append -export;
}

function -fstsfinal(itFst,nU)
{
  data dSFinal;
  -type char 1 :itFst.ud[nU,"~XS"]: dSFinal -array;
  :itFst.sd[0]: :itFst.ud[nU,"~FS"]: :itFst.ud[nU,"~XS"]: 0 dSFinal /rec -xstore;
  :dSFinal.nrec/4: :dSFinal.nrec/4: ent != while;
    dSFinal.nrec ++ dSFinal -reallocate;
  end;
  "$[.sRD]" "raw" dSFinal stdfile /append -export;
}

function -fstt(itFst,nU)
{
  data dT;
  -type int   4 dT -addncomps;
  -type float 1 dT -addncomps;
  -type int   1 dT -addncomps;
  { { "ter" } { "ini" } { "tis" } { "tos" } { "w" } { "stk" } } 0 dT -set_cnames;
  :itFst.ud[nU,"~XT"]: dT -reallocate;
  data idTd;
  :itFst.ud[nU,"~FT"]: :itFst.ud[nU,"~XT"]: itFst.td /rec -xfetch idTd =;
  idTd "~INI" idTd -find_comp idTd -sortdown;
  idTd "~TER" idTd -find_comp 1 "ter" dT -xstore; 
  idTd "~INI" idTd -find_comp 1 "ini" dT -xstore; 
  idTd "~TIS" idTd -find_comp 1 "tis" dT -xstore; 
  idTd "~TOS" idTd -find_comp 1 "tos" dT -xstore; 
  idTd "~LSR" idTd -find_comp 1 "w"   dT -xstore; 
  idTd "~STK" idTd -find_comp 1 "stk" dT -xstore; 
  "$[.sRD]" "raw" dT stdfile /append -export;
}

function -fsttfroms(itFst,nU)
{
  data dTfromS;
  -type int 1 :itFst.ud[nU,"~XS"]: dTfromS -array;
  0 1 dTfromS -fill;
  data idTd;
  :itFst.ud[nU,"~FT"]: :itFst.ud[nU,"~XT"]: itFst.td /rec -xfetch idTd =;
  idTd "~INI" idTd -find_comp idTd -sortdown;
  dTfromS idTd 0 "~INI" idTd -find_comp dTfromS -gen_index;
  :dTfromS*24: -type int dTfromS -tconvert;
  "$[.sRD]" "raw" dTfromS stdfile /append -export;
}

function -symbol(os)
{
  data dSymbol;
  os 255 dSymbol /force -tconvert;
  1 1 dSymbol -addncomps;
  "$[.sRD]" "raw" dSymbol stdfile /append -export;
}

function -tis2phn(itGP)
{
  data dT2P;
  :itGP.td["~TIS"]: NULL 0 "max" dT2P /rec -aggregate;
  -type int 1 :dT2P[0,0]+1: dT2P -array;
  0 1 dT2P -fill;
  dT2P :itGP.td["~TIS"]: 0 0 dT2P -gen_index;
  dT2P 0 :itGP.td["~TOS"]: 0 1 dT2P -lookup;
  dT2P -type int dT2P -tconvert;
  "$[.sRD]" "raw" dT2P stdfile /append -export;
}

function -filename(sFN)
{
  data dFN;
  data dAux;
  255 1 1 dFN -array;
  :dFN[0,0]=sFN;
  dFN "" "lwr" dFN -strop;
  dFN "" "len" dAux -strop;
  dFN :dAux[0,0]+1: dFN /force -tconvert;
  "$[.sRD]" "raw" dFN stdfile /append -export;
}

function -PACK_recodata(iSI)
{
  "$[.sDirDsp]/recodata.bin" .sRD =;
  "\n   Packing recodata file ($[.sRD])."                                        -MSG; # Protocol

  #### Write it #######
  iSI -algospec;
  iSI -minireco;
  iSI.itRN -1 iSI.itRN -push_weights;
  0 var nU; nU iSI.itRN.ud.nrec < while;
    iSI.itRN nU -fsthead;
  nU ++=; end;
  0 nU =; nU iSI.itRN.ud.nrec < while;
    iSI.itRN nU -fstsfinal;
    iSI.itRN nU -fstt;
    iSI.itRN nU -fsttfroms;
  nU ++=; end;
  iSI.itRNr 0 -fsthead;
  iSI.itRNr 0 -fstsfinal;
  iSI.itRNr 0 -fstt;
  iSI.itRNr 0 -fsttfroms;
  iSI.itRN.os -symbol;
  iSI.itGP -tis2phn;
  profile p;
#  "$[sPrj] $[p -date] $[p -time]" -filename;

  " ok"                                                   -MSG; # Protocol
}
