## UASR: Unified Approach to Speech Synthesis and Recognition
## - Universal Primary and secondary feature analysis and synthesis
##
## AUTHOR : Frank Duckhorn
## PACKAGE: uasr/scripts/dlabpro/util

## Copyright 2013 UASR contributors (see COPYRIGHT file)
## - Chair of System Theory and Speech Technology, TU Dresden
## - Chair of Communications Engineering, BTU Cottbus
##
## This file is part of UASR.
##
## UASR is free software: you can redistribute it and/or modify it under the
## terms of the GNU Lesser General Public License as published by the Free
## Software Foundation, either version 3 of the License, or (at your option)
## any later version.
##
## UASR is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
## details.
##
## You should have received a copy of the GNU Lesser General Public License
## along with UASR. If not, see <http://www.gnu.org/licenses/>.

function -UPFA_trf_FFT(idFea)
{
  idFea fft abs idFea.nScale ./ idFea =;
}

function -UPFA_map_LOG(idFea)
{
  idFea .ln
    idFea.nScale .ln +
    0 max
    idFea =;
}

function -UPFA_map_NONE(idFea)
{
  leave;
}

function -UPFA_ana(idSig,idPM,idFea,idDummy,iPfa)
{
  idSig idFea =;
  # TODO: labels

  iPfa.rmdc if idFea rmdc idFea = end;
  # TODO: synchronus framing

  idFea nosify idFea =;
  idFea iPfa.wlen iPfa.crate frame # TODO: use dlm_fba_doframing (quant noise + pitch)
    iPfa.wlen iPfa.len iPfa.wtype iPfa.wnorm window idFea =;

  idFea -UPFA_trf_$[iPfa.trf];
  # TODO: noiserdc

  # TODO: log if mf_type="S"
  iPfa.fil -is_empty not if
    iPfa.fil idFea * idFea =;
  end

  idFea.dim iPfa.dim > if idFea iPfa.dim :idFea.dim-iPfa.dim: idFea -delete; end
  idFea.dim iPfa.dim < if -type double :iPfa.dim-idFea.dim: idFea -addncomps; end

  idFea -UPFA_map_$[iPfa.map];
}

function -UPFA_syn(idFea,idControl,idSyn)
{
  "Universal synthesis is currently not implemented." -ERROR;
}

function -UPFA_init()
{
  ## Create and configure signal analysis/synthesis processor                   # -------------------------------------
  object iPfa;                                                                  # Create analysis processor

  function -UPFA_cfg(sCfgN,sCfgO1,sCfgO2,def,sType)
  {
    function -UPFA_cfgo(sCfgO,val)
    {
      "" sCfgO == if val return end;
      data idCfgO;
      { "$[sCfgO]" } ":" "split" idCfgO -strop;
      idCfgO.dim 2 == if;
        :idCfgO[0,0]: "" "S" -CFG_get_ex :idCfgO[0,1]: "search" -VAR_strop 0 >=
          if TRUE else FALSE end val =;
        else;
        sCfgO val "S" -CFG_get_ex val =;
      end;
      val return;
    }

    sType "1" "left"  -VAR_strop var sLType;
    sType "l" "search" -VAR_strop 0 >= var bLoc;
    sType "f" "search" -VAR_strop 0 >= var bFnc;
    sType "F" "search" -VAR_strop 0 >= var bIniFnc;

    def var val;
    sCfgO2 val -UPFA_cfgo val =;
    sCfgO1 val -UPFA_cfgo val =;
    "pfa.UPFA.$[sCfgN]" val "S" -CFG_get_ex val =;

    bFnc if;
      "-UPFA_$[sCfgN]_$[val]" "function" ?instance not if;
        "Function -UPFA_$[sCfgN]_$[val] does not exist (fix uasr.pdf.UPFA.$[sCfgN])" -ERROR;
        def val =;
      end;
    end;
    bIniFnc if;
      "-UPFA_init_$[sCfgN]_$[val]" "function" ?instance not if;
        "Function -UPFA_init_$[sCfgN]_$[val] does not exist (fix uasr.pdf.UPFA.$[sCfgN])" -ERROR;
        def val =;
      end;
    end;

    var vout;
    val vout -$[sLType]set;
    bLoc not if;
      object iP; iPfa iP =;
      var iP.$[sCfgN];
      vout iP.$[sCfgN] -$[sLType]set;
      iP iPfa =;
    end;
    vout return;
  }
  function -UPFA_init_fil_MEL()
  {
    "fil.MEL.lambda" ""                "" 0.47 "vl" -UPFA_cfg var nLambda;
    "fil.MEL.type"   "pfa.MEL.mf_type" "" "MT" "sl" -UPFA_cfg var sType;
    
    # TODO: mf_type "S"
    iPfa.fil -reset;
    iPfa.len unit nLambda iPfa.dim sType mfbs iPfa.fil =;
  }

  function -UPFA_init_fil_NONE()
  {
    iPfa.fil -reset;
  }

  ## Create session persistent variables                                        # -------------------------------------
  ".__FEA_iPfa"      ""   ?instance     if .__FEA_iPfa -destroy;  end           # Destroy previous analysis processor
  ".__FEA_sAnaOpt"  "var" ?instance not if "" var .__FEA_sAnaOpt; end           # Options on -analyze
  ".__FEA_sSynOpt"  "var" ?instance not if "" var .__FEA_sSynOpt; end           # Options on -synthesize

  ## Common configuration                                                       # -------------------------------------
  "srate" "sig.srate"            ""      16000 "v"   -UPFA_cfg;                 # Set sampling rate
  "crate" "pfa.crate"            ""        160 "v"   -UPFA_cfg;                 # Set frame continuation rate
  "wlen"  "pfa.wlen"             ""        400 "v"   -UPFA_cfg;                 # Set window length
  "wtype" "pfa.window"           "" "Blackman" "s"   -UPFA_cfg;                 # Set window type
  "len"   "pfa.len"              ""        512 "v"   -UPFA_cfg;                 # Set frame length
  "dim"   "pfa.dim"              ""         30 "v"   -UPFA_cfg;                 # Set primary feature vector dimension

  ## UPFA configuration                                                         # -------------------------------------
  "rmdc"  "pfa.anaoptions:/rmdc" ""      FALSE "b"   -UPFA_cfg;                 # Set remove mean
  "wnorm" "pfa.FBA.wnorm"        ""      FALSE "b"   -UPFA_cfg;                 # Set window normalization
  "trf"   ""                     ""      "FFT" "sf"  -UPFA_cfg;                 # Set signal transformation method
  "fil"   ""                     ""      "MEL" "slF" -UPFA_cfg var sFil;        # Get filter matrix type
  data iPfa.fil;  -UPFA_init_fil_$[sFil];                                       # Set filter matrix
  "map"   ""                     ""      "LOG" "sf"  -UPFA_cfg;                 # Set feature mapping

  ## Functions                                                                  # -------------------------------------
  function iPfa.-analyze;    /disarm -UPFA_ana /disarm iPfa.-analyze    =;      # Set analysis function
  function iPfa.-synthesize; /disarm -UPFA_ana /disarm iPfa.-synthesize =;      # Set synthesis function

  ## Finalize                                                                   # -------------------------------------
  object .__FEA_iPfa; iPfa .__FEA_iPfa =;                                       # Create global object and copy proc.
}

