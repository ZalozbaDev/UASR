#!/usr/bin/env dlabpro
## UASR: Unified Approach to Speech Synthesis and Recognition
## - Deep neural network training and classifier
##
## AUTHOR : Frank Duckhorn
## PACKAGE: uasr/scripts/dlabpro
##
## ARGUMENTS:
##   $1: Command or 'help'
##   $2: Setup file or, if 1st arg. is 'help', command

## Copyright 2013-2016 UASR contributors (see COPYRIGHT file)
## - Chair of Communications Engineering, BTU Cottbus-Senftenberg
## - Fraunhofer IKTS, Dresden
## - Chair of System Theory and Speech Technology, TU Dresden
##
## This file is part of UASR.
##
## UASR is free software: you can redistribute it and/or modify it under the
## terms of the GNU Lesser General Public License as published by the Free
## Software Foundation, either version 3 of the License, or (at your option)
## any later version.
##
## UASR is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
## details.
##
## You should have received a copy of the GNU Lesser General Public License
## along with UASR. If not, see <http://www.gnu.org/licenses/>.

"util/cfg.itp"  include;                                                        # Include configuration utilities
"util/os.itp"   include;                                                        # Include OS utilities
"util/uasr.itp" include;                                                        # Include UASR utilities
"util/var.itp"  include;                                                        # Include variables' utilities

## Prints the program logo
function -logo()
{
  "\n// UASR - UNIFIED APPROACH TO SPEECH SYNTHESIS AND RECOGNITION"      -MSG; # Protocol               
  "\n// $__SFILE__.xtp"                                                   -MSG; # Protocol
  "\n// Process         : $HOSTNAME/" -pid +                              -MSG; # Protocol
  "\n// dLabPro VID     : " -version +                                    -MSG; # Protocol
  "\n// UASR VID        : " -UASR_version +                               -MSG; # Protocol
}

## Prints help on usage
##
## @param sCmd string
##          Command to display help for (general help if empty).
function -usage(sCmd)
{
  "\n"                                                                    -MSG;
  sCmd "fea" == if
      "\n   fea: DNN feature conversion"                                  -MSG;
    "\n\n   USAGE:"                                                       -MSG;
      "\n     dlabpro $__SFILE__.xtp ana <cfgfile> [options]"             -MSG;
    "\n\n   ARGUMENTS:"                                                   -MSG;
      "\n     <cfgfile>       UASR configuration file"                    -MSG;
    "\n\n   OPTIONS:"                                                     -MSG;
      "\n     -P<key>=<value> override config. key-value-pairs"           -MSG;
      "\n     -v<n>           verbose level"                              -MSG;
    "\n\n   REMARKS:"                                                     -MSG;
      "\n     Special <key>s for $__SFILE__.xtp trn:"                     -MSG;
      "\n       dnn.fmin: Lower limit for feature value quantization"     -MSG;
      "\n       dnn.fmax: Upper limit for feature value quantization"     -MSG;
      "\n       dnn.fbit: Number of bits for feature value quantization"  -MSG;
    "\n\n"                                                                -MSG;
    0 return;
  end
  sCmd "evl" == if
      "\n   evl: DNN evaluation"                                          -MSG;
    "\n\n   USAGE:"                                                       -MSG;
      "\n     dlabpro $__SFILE__.xtp evl <cfgfile> [options]"             -MSG;
    "\n\n   ARGUMENTS:"                                                   -MSG;
      "\n     <cfgfile>       UASR configuration file"                    -MSG;
    "\n\n   OPTIONS:"                                                     -MSG;
      "\n     -v<n>           verbose level"                              -MSG;
      "\n     -P<key>=<value> override config. key-value-pairs"           -MSG;
    "\n\n"                                                                -MSG;
    0 return;
  end
  sCmd "trn" == if
      "\n   trn: DNN training"                                            -MSG;
    "\n\n   USAGE:"                                                       -MSG;
      "\n     dlabpro $__SFILE__.xtp trn <cfgfile> [options]"             -MSG;
    "\n\n   ARGUMENTS:"                                                   -MSG;
      "\n     <cfgfile>       UASR configuration file"                    -MSG;
    "\n\n   OPTIONS:"                                                     -MSG;
      "\n     -P<key>=<value> override config. key-value-pairs"           -MSG;
      "\n     -v<n>           verbose level"                              -MSG;
    "\n\n   REMARKS:"                                                     -MSG;
      "\n     Special <key>s for $__SFILE__.xtp trn:"                     -MSG;
      "\n       dnn.test_iter    : TODO"                                  -MSG;
      "\n       dnn.test_interval: TODO"                                  -MSG;
      "\n       dnn.display      : TODO"                                  -MSG;
      "\n       dnn.max_iter     : TODO"                                  -MSG;
      "\n       dnn.snapshot     : TODO"                                  -MSG;
      "\n       dnn.solver_mode  : TODO"                                  -MSG;
      "\n       dnn.base_lr      : TODO"                                  -MSG;
      "\n       dnn.momentum     : TODO"                                  -MSG;
      "\n       dnn.weight_decay : TODO"                                  -MSG;
      "\n       dnn.lr_policy    : TODO"                                  -MSG;
      "\n       dnn.gamma        : TODO"                                  -MSG;
      "\n       dnn.power        : TODO"                                  -MSG;
    "\n\n"                                                                -MSG;
    0 return;
  end
  sCmd "xtpx" == if
      "\n   xtpx: Create executable program object"                       -MSG;
    "\n\n   USAGE:"                                                       -MSG;
      "\n     dlabpro $__SFILE__.xtp xtpx"                                -MSG;
    "\n\n   EXAMPLE:"                                                     -MSG;
      "\n     $__SFILE__.xtp xtpx"                                        -MSG;
    "\n\n"                                                                -MSG;
    0 return;
  end
    "\n   SYNOPSIS:"                                                      -MSG;
    "\n     HMM: Hidden Markov model classifier and synthesizer"          -MSG;
  "\n\n   USAGE:"                                                         -MSG;
    "\n     dlabpro $__SFILE__.xtp <command> <cfgfile> [options]"         -MSG;
  "\n\n   COMMANDS:"                                                      -MSG;
    "\n     ana  - Model analysis (EXPERIMENTAL)"                         -MSG;
    "\n     adp  - Model adaptation MAP"			                      -MSG;
    "\n     cut  - HMM cut diphones and generate HMM diphone inventory"   -MSG;
    "\n     cnv  - Calculate feature/speaker conversion matrix"           -MSG;
    "\n     evl  - Evaluation"                                            -MSG;
    "\n     lab  - Phoneme labeling"                                      -MSG;
    "\n     syn  - Synthesis"                                             -MSG;
    "\n     trn  - Training"                                              -MSG;
    "\n     xtpx - Create executable program object"                      -MSG;
  "\n\n  Type 'dlabpro $__SFILE__.xtp help <command>' for help on a "     -MSG;
         "specific command."                                              -MSG;
    "\n"                                                                  -MSG;
  0 return;
}

function -PNG_save(sF,idFea,rmin,rmax,rbit)
{
  data idSFea;

  idFea idSFea =;
  idSFea.dim -- idSFea -get_comp_type 255 <= while; idSFea 0 idSFea.dim -- idSFea -select; end;
  idSFea rmin - :rmax-rmin: ./ idSFea =;
  idSFea :2^rbit: * round idSFea =;
  idSFea :2^rbit-1: min idSFea =;
  idSFea 0 max idSFea =;
  idSFea -type UINT$[rbit] idSFea -tconvert;
  "$[sF].raw" "raw" idSFea stdfile -export;
  "rm -f $[sF]" -system;
  "convert -depth $[rbit] -size $[idSFea.dim]x$[idSFea.nrec] gray:$[sF].raw $[sF]" -system;
  "rm $[sF].raw" -system;

  1 return;
}

## DNN feature conversion
function -CMD_fea()
{
  ## Variables                                                                  # -------------------------------------
  file iF;                                                                      # File list for signal analysis
  data idFea;                                                                   # Feature data
  data idSns;   -SNS_get_tab                   idSns   =;                       # Get sensor table
  var  nE;                                                                      # Number of skipped files
  var  nSns;                                                                    # Current sensor index
  var  nCst;                                                                    # Current sample time [s]
  var  nTst;                                                                    # Total sample time [s]
  var  sF;                                                                      # File name
  var  sSns;                                                                    # Current sensor name

  ## Initialize                                                                 # -------------------------------------
  "\n\n// DNN FEATURE CONVERSION"                                         -MSG; # Protocol
  "sig" "" -CFG_get_path;                                                       # Echo signal files path
  "lab" "" -CFG_get_path;                                                       # Echo label files path
  "fea" "" -CFG_get_path;                                                       # Echo feature files path
  ( "flist.sep" "\t " "S" -CFG_get_ex ) iF set sep;                             # Set file list separator(s)  
  "all" "" -CFG_get_flist iF set flist;                                         # Signal files list
  var nFmin; "dnn.fmin"  0 -CFG_get nFmin -vset;
  var nFmax; "dnn.fmax" 12 -CFG_get nFmax -vset; 
  var nFbit; "dnn.fbit"  8 -CFG_get nFbit -vset;

  ## Sensor loop                                                                # -------------------------------------
  :idSns[0,0]: if "\n// No. of sensors  : $[idSns.nrec]" -MSG; end              # Protocol
  label L_SNS;                                                                  # Loop over sensors

    ## File loop                                                                #   - - - - - - - - - - - - - - - - - -
    0 nE =;                                                                     #   Reset error counter
    "\n" -MSG; :idSns[nSns,0]: if "\n   Sensor ${idSns[nSns,0]}" -MSG; end      #   Protocol
    "\n   Feature analysis of $[iF.len] signal files ..."                 -MSG; #   Protocol
    0 1 -PBAR;                                                                  #   Begin progress bar
    iF -reset; label L_FILE; iF -next if                                        #   Loop over files >>

      "\n"                                                             3 -MSGX; #     Protocol
      "\n     $[iF.nfile 1 +]/$[iF.len] - $[iF.sfile]: "                 -MSG2; #     Protocol
      :(iF.nfile+1)/iF.len: 1 -PBAR;                                            #     Display progress

      ## Get primary feature vectors                                            #     . . . . . . . . . . . . . . . . .
      stdprof -begin_timer;                                                     #     Start measuring time
      iF "${idSns[nSns,0]}" "S" idFea -FEA_get not if nE ++=; goto L_FILE; end  #     Get primary feature vectors
      "" stdprof -end_timer;                                                    #     Stop measuring time
      "." -MSG2;                                                                #     Protocol

      ## Save primary feature file                                              #     . . . . . . . . . . . . . . . . .
      .__CFG_bNwr not if                                                        #     Saving feature vector file >>
         "${idSns[nSns,0]}" sSns =; sSns if ".$[sSns]" sSns =; end              #       Make ext. out of sensor name
         "$[__sDirFea]/$[iF.sfile]$[sSns].png" sF =;                            #       Make path name of feature file
         "\n     - storing: $[sF] ..."                                 3 -MSGX; #       Protocol
        sF idFea nFmin nFmax nFbit -PNG_save if                                 #       Save feature file, ok >>
          " ok\n       "                                               3 -MSGX; #         Protocol
        else                                                                    #       << failed >>
          " FAILED\n       "                                           3 -MSGX; #         Protocol
          nE ++=;                                                               #         Count errors
        end                                                                     #       <<
        "." -MSG2;                                                              #       Protocol
      end;                                                                      #     <<

      ## Aftermath                                                              #     . . . . . . . . . . . . . . . . .
      idFea.nrec idFea.rinc * 1000 / nCst =;                                    #     Compute sample time
      nCst nTst +=;                                                             #     Compute total sample time
      " ok (RTF $[stdprof.time nCst / ent 1000 /] @ $[nCst] s)"          -MSG2; #     Protocol
      goto L_FILE;                                                              #     End of file loop
    end                                                                         #   <<
    "\n   " -MSG2; "done\n"                                               -MSG; #   Protocol
    "\n   Total sample time: $[nTst 60 /] min"                           -MSG2; #   Protocol
    nE if "$[nE]/$[iF.len] turns defective!" 1 -WARNING; end                    #   Warn for defective turns

    ## End of sensor loop                                                       #   - - - - - - - - - - - - - - - - - -
    nSns ++=; nSns idSns.nrec < if goto L_SNS; end                              #   End of loop

  "\n// $__SFILE__.xtp completed (${.__UTL_nErrors} errors).\n"           -MSG; # Protocol
  0 return;                                                                     # Return "OK"
}

## DNN training
function -CMD_trn()
{
  function -FLST_cnv(sFNi,sFNo)
  {
    data idLsti; sFNi "ascii" idLsti stdfile -import;
    data idLsto;
    data idAux;
    1 idLsti.nrec zeros 0 { "$[sDirFea]/" } 0 1 idLsto -lookup;
    :idLsti[0]: idLsto -join;
    1 idLsti.nrec zeros 0 { ".png" } 0 1 idAux -lookup; idAux idLsto -join;
    idLsto "" "ccat" idLsto -strop;
    :idLsti[1]: idLabTab 0 0 idAux -gen_index; idAux idLsto -join;
    idLsto idLsto.nrec idLsto -SET_rss;
    sFNo "ascii" idLsto stdfile -export;
  }

  ## Initialize                                                                 # -------------------------------------
  "\n\n// DNN TRAINING"                                                   -MSG; # Protocol
  "log"   "" -CFG_get_path var sDirLog;                                         # Get log path
  "model" "" -CFG_get_path var sDirMod;                                         # Get model path
  "fea"   "" -CFG_get_path var sDirFea;                                         # Get feature files path
  "info"  "" -CFG_get_path var sDirInfo;                                        # Get info path

  ## Generate solver config                                                     # -------------------------------------
  "$[sDirMod]/solver.prototxt" var sF;
  data dSolv;
  {
    "net: \"$[sDirMod]/net.prototxt\""
    "snapshot_prefix: \"$[sDirMod]/dnn\""
  } dSolv =;
  var sAux;
  "test_iter: "     "dnn.test_iter"        25 "S" -CFG_get_ex + sAux =; { sAux } dSolv -join;
  "test_interval: " "dnn.test_interval"    10 "S" -CFG_get_ex + sAux =; { sAux } dSolv -join;
  "display: "       "dnn.display"           5 "S" -CFG_get_ex + sAux =; { sAux } dSolv -join;
  "max_iter: "      "dnn.max_iter"       1000 "S" -CFG_get_ex + sAux =; { sAux } dSolv -join;
  "snapshot: "      "dnn.snapshot"         20 "S" -CFG_get_ex + sAux =; { sAux } dSolv -join;
  "solver_mode: "   "dnn.solver_mode"   "CPU" "S" -CFG_get_ex + sAux =; { sAux } dSolv -join;
  "base_lr: "       "dnn.base_lr"        0.01 "S" -CFG_get_ex + sAux =; { sAux } dSolv -join;
  "momentum: "      "dnn.momentum"       0.95 "S" -CFG_get_ex + sAux =; { sAux } dSolv -join;
  "weight_decay: "  "dnn.weight_decay" 0.0005 "S" -CFG_get_ex + sAux =; { sAux } dSolv -join;
  "lr_policy: \""   "dnn.lr_policy"     "inv" "S" -CFG_get_ex + "\"" + sAux =; { sAux } dSolv -join;
  "gamma: "         "dnn.gamma"         0.001 "S" -CFG_get_ex + sAux =; { sAux } dSolv -join;
  "power: "         "dnn.power"          0.75 "S" -CFG_get_ex + sAux =; { sAux } dSolv -join;
  sF "ascii" dSolv ' stdfile -export;

  ## Generate file lists                                                        # -------------------------------------
  data idLabTab; -LAB_get_tab idLabTab =;
  "train" "" -CFG_get_flist "$[sDirMod]/dnn_train.flst" -FLST_cnv;                  # Signal files list
  "test"  "" -CFG_get_flist "$[sDirMod]/dnn_test.flst"  -FLST_cnv;                  # Signal files list

  ## Set file lists name in net.prototxt                                        # -------------------------------------
  data idNet;
  file iF; "" iF -set sep;
  "$[sDirInfo]/net.prototxt" "ascii" idNet iF -import;
  idNet 255 idNet /force -tconvert;
  idNet "?TRAINFLST?$[sDirMod]/dnn_train.flst" "replace" idNet -strop;
  idNet "?TESTFLST?$[sDirMod]/dnn_test.flst"   "replace" idNet -strop;
  "$[sDirMod]/net.prototxt" "ascii" idNet iF -export;

  "caffe train -solver $[sF] 2>&1 | tee $[sDirLog]/dnn_train.log" -system

  ## Aftermath                                                                  # -------------------------------------
label L_EXCEPTION;                                                              # Exception label
  "\n// $__SFILE__.xtp completed (${.__UTL_nErrors} errors).\n"           -MSG; # Protocol
  0 return;                                                                     # Ok
} 

## DNN evaluation
function -CMD_evl()
{
  ## Initialize                                                                 # -------------------------------------
  "\n\n// DNN EVALUATION"                                                 -MSG; # Protocol
  "log"   "" -CFG_get_path var sDirLog;                                         # Get log path
  "model" "" -CFG_get_path var sDirMod;                                         # Get model path
  "fea"   "" -CFG_get_path var sDirFea;                                         # Get feature files path
  "info"  "" -CFG_get_path var sDirInfo;                                        # Get info path

  ## Loop over models & evaluate each model                                     # -------------------------------------
  data idMLst;
  sDirMod "dnn_iter_*.caffemodel" FALSE idMLst -SH_find;
  idMLst "?.caffemodel?" "replace" idMLst -strop;
  0 var m; m idMLst.nrec < while;
    "\n - evl ${idMLst[m,0]} -> " -echo;
    "python $UASR_HOME/scripts/python/dnn_evl.py "
        "$[sDirInfo]/deploy.prototxt " +
        "$[sDirMod]/${idMLst[m,0]}.caffemodel " +
        "$[sDirMod]/dnn_test.flst " +
        ">$[sDirLog]/${idMLst[m,0]}_evl.log 2>&1" + -system;
    "grep acc: $[sDirLog]/${idMLst[m,0]}_evl.log | tr -d '\n'" -system;
  m ++=; end;

  ## Generate results plot                                                      # -------------------------------------
  "\n - Results plot: $[sDirLog]/dnn_evl.png" -echo;
  "perl $UASR_HOME/scripts/perl/dnn_plotres.pl $[sDirLog] | plot.pl -out $[sDirLog]/dnn_evl.png" -system;

  ## Aftermath                                                                  # -------------------------------------
label L_EXCEPTION;                                                              # Exception label
  "\n// $__SFILE__.xtp completed (${.__UTL_nErrors} errors).\n"           -MSG; # Protocol
  0 return;                                                                     # Ok
}

## == MAIN PROGRAM ==                                                           # =====================================
-logo;                                                                          # Print logo
( "$1" "help" == ) -UASR_help || if "$2" -usage; 0 return; end                  # Print help
"$1" var sCmd;                                                                  # Get command
sCmd "xtpx" != if                                                               # Not saving program object >>
  sCmd "fea" ==                                                                 #   | HMM analysis
  sCmd "evl" == ||                                                              #   | HMM labeling
  sCmd "trn" == ||                                                              #   | HMM synthesis
  not ( $$ 2 < ) || if                                                          #   Bad command or less than 2 args. >> 
    $$ 2 < if "Too few arguments" else "unknown command '$1'"  end   -ERROR;    #     Error
    "\nType '$__SFILE__.xtp help' for usage\n" -echo;                           #     Give a little help
    1 return;                                                                   #     Terminate with error code
  end                                                                           #   <<
end                                                                             # <<

## Do includes                                                                  # -------------------------------------
"\n// Includes        : "                                                 -MSG; # Protocol
"util/fea.itp"     include;                                           "." -MSG; # Include feature utilities
"util/sig.itp"     include;                                           "." -MSG; # Include feature utilities
"util/lab.itp"     include;                                           "." -MSG; # Include feature utilities
"util/data.itp"    include;                                           "." -MSG; # Include feature utilities
" done"                                                                   -MSG; # Protocol

## Save/continue program object                                                 # -------------------------------------
"$1" "xtpx" == if                                                               # Saving executable program object >>
  var sXtpxFile; "$__FILE__" "x" + sXtpxFile =;                                 #   Make target file name
  "\n\n   Creating " sXtpxFile + " ..." +                                 -MSG; #   Protocol
  sXtpxFile this /zip -save;                                                    #   Save program object
  "$1" "xtpx" == if                                                             #   If not restarting >>
    " done.\n\n// $__SFILE__.xtp completed (${.__UTL_nErrors} errors).\n" -MSG; #     Protocol
    quit                                                                        #     The end
  else                                                                          #   << If restarting >>
    -logo;                                                                      #     Print logo
  end                                                                           #   <<
end                                                                             # <<

## Initialize session                                                           # -------------------------------------
"\n// Configuration   : $2"                                               -MSG; # Protocol
"$2" TRUE -CFG_init;                                                            # Configure session
"util/uasr_session.itp" include;                                                # Include UASR session startup script

## Execute commands                                                             # -------------------------------------
-CMD_$1 return;                                                                 # Call command handler function

## EOF
